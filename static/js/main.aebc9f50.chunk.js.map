{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions/index.js","constants.js","serviceWorker.js","reducers/index.js","index.js"],"names":["Card","_this$props","this","props","id","name","email","react_default","a","createElement","className","alt","src","concat","Component","CardList","cardComponent","_this$props$robots","_this","robots","map","robot","components_Card","Object","assign","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","children","style","overflow","border","height","App","filteredRobots","_this$props$searchFie","searchField","filter","toLocaleLowerCase","includes","onRequestRobots","_this$props2","onSearchChange","isPending","components_SearchBox","components_Scroll","components_CardList","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aebc9f50.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Card extends Component {\n  render() { \n    let {id, name, email} = this.props;\n    return ( \n      <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n        <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\n        <div>\n          <h2>{name}</h2>\n          <p>{email}</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport Card from \"./Card\";\n\nclass CardList extends Component {\n  cardComponent = () => {\n    let { robots = [] } = this.props;\n    return robots.map(robot => <Card key={robot.id} {...robot} />);\n  };\n  render() {\n    return <div>{this.cardComponent()}</div>;\n  }\n}\n\nexport default CardList;\n","import React, { Component } from \"react\";\n\nclass SearchBox extends Component {\n  render() {\n    var { searchChange } = this.props;\n    return (\n      <div className=\"pa2\">\n        <input\n          className=\"pa3 ba b--green bg-lightest-blue\"\n          type=\"search\"\n          placeholder=\"search robots\"\n          onChange={searchChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SearchBox;\n","import React, { Component } from 'react';\n\nclass Scroll extends Component {\n  render() {\n    let {children} = this.props;\n    return (\n      <div\n        style={{\n          overflow: \"scroll\",\n          border: \"5px solid black\",\n          height: \"800px\"\n        }}\n      >\n          {children}\n      </div>\n    );\n  }\n}\n\nexport default Scroll;","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\n\nimport {connect} from \"react-redux\";\nimport {setSearchField, requestRobots} from \"../actions\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  filteredRobots = () => {\n    let {searchField=\"\", robots=[]} = this.props;\n    return robots.filter(robot =>\n      robot.name.toLocaleLowerCase().includes(searchField)\n    );\n  };\n\n  render() {\n    const filteredRobots = this.filteredRobots();\n    const {onSearchChange, isPending} = this.props;\n\n    if (isPending) {\n      return <h1 className=\"tc\">Loading...</h1>;\n    }\n    \n    return (\n      <div className=\"tc\">\n        <h1 className=\"f2\">RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <CardList robots={filteredRobots} />\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToPropss  = (dispatch) => {\n  return {\n    onSearchChange: (event) => {\n      dispatch(setSearchField(event.target.value))\n    },\n    onRequestRobots: () => {\n      dispatch(requestRobots())\n    }\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToPropss\n)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"../constants\";\n\nexport const setSearchField = text => {\n  return {\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n  };\n};\n\nexport const requestRobots = params => {\n  return dispatch => {\n    dispatch({\n      type: REQUEST_ROBOTS_PENDING\n    });\n\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(data => {\n        dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data });\n      })\n      .catch(error => {\n        dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error });\n      });\n  };\n};\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"../constants\";\n\nconst initialStateSearch = {\n  searchField: \"\"\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD: \n      return {...state, searchField: action.payload};\n    default: \n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return {...state, isPending: true};\n    case REQUEST_ROBOTS_SUCCESS:\n      return {...state, robots: action.payload, isPending: false};\n    case REQUEST_ROBOTS_FAILED:\n      return {...state, error: action.payload, isPending: false};\n    default:\n      return state;\n  }\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport \"./App.css\";\n\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\n// middleware redux\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\n// reducers\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nconst logger = createLogger(); // KHông nên gọi trực tiếp function\n\nconst rootReducer = combineReducers({\n  searchRobots,\n  requestRobots\n});\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}